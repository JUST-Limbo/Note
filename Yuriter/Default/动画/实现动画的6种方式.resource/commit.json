{"compress":true,"commitItems":[["6aaf96bc-9ee1-4a9f-ab0d-c1482590d330",1578879418858,"",[[1578879370862,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"实现动画的"]],[0,0],[5,5]]],[1578879371916,["Administrator@WIN-T3FPCJLTUH1",[[-1,0,"实现动画的"]],[5,5],[0,0]]],[1578879389104,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"# 实现动画的6种方式\n\n\n\n"]],[0,0],[14,14]]],[1578879393533,["Administrator@WIN-T3FPCJLTUH1",[[1,13,"通常在前端中，实现动画的方案主要有6种：\n\n*   javascript直接实现；\n*   SVG（可伸缩矢量图形）；\n*   CSS3 transition；\n*   CSS3 animation；\n*   Canvas动画；\n*   requestAnimationFrame；\n\n# javascript 直接实现动画\n\n> 其主要思想是通过setInterval或setTimeout方法的回调函数来持续调用改变某个元素的CSS样式以达到元素样式变化的效果。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <style type=\"text/css\">\n 6 #rect {\n 7             width: 200px;\n 8             height: 200px;\n 9             background: #ccc;\n10         }\n11     </style>\n12 </head>\n13 <body>\n14     <div id=\"rect\"></div>\n15     <script>\n16 let elem = document.getElementById('rect'); 17 let left = 0; 18 let timer = setInterval(function(){ 19             if(left<window.innerWidth-200){ 20 elem.style.marginLeft = left+'px'; 21 left ++; 22             }else { 23 clearInterval(timer); 24 } 25         },16); 26     </script>\n27 </body>\n28 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\nJquery的animate()方法就是这种方式实现的。\n\n## 存在的问题\n\njavascript 实现动画通常会导致页面频繁性重排重绘，消耗性能，一般应该在桌面端浏览器。在移动端上使用会有明显的卡顿。\n\n## Tip：为什么是16ms\n\n上面例子中，我们设置的setInterval时间间隔是16ms。一般认为人眼能辨识的流畅动画为每秒60帧，这里16ms比(1000ms/60)帧略小一些，但是一般可仍为该动画是流畅的。 \n在很多移动端动画性能优化时，一般使用16ms来进行节流处理连续触发的浏览器事件。例如对touchmove、scroll事件进行节流等。通过这种方式减少持续事件的触发频率，可以大大提升动画的流畅性。\n\n# SVG\n\nSVG动画由SVG元素内部的元素属性控制，一般通过一下几个元素控制：\n\n*   : 用于控制动画延时\n*   ：对属性的连续改变进行控制\n*   ：颜色变化，但用就能控制\n*   ：控制如缩放、旋转等几何变化\n*   ：控制SVG内元素的移动路径\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <title>Document</title>\n 6     <style>\n 7     *{\n 8         margin:0;\n 9         padding:0;\n10     }\n11     </style>\n12 </head>\n13 <body>\n14     <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n15         <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n16             <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n17             <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n18             <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n19             <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n20             <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n21 \n22         </rect>     \n23     </svg>  \n24 \n25 </body>\n26 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n这里推荐一个在sublime text3中使用svg提示插件：svg snippet。\n\n## 比较\n\nSVG的一大优势是含有较为丰富的动画功能，原生绘制各种图形、滤镜和动画，并且能被js调用。html是对dom的渲染，那么svg就是对图形的渲染。 \n但是，另一方面元素较多且复杂的动画使用svg渲染会比较慢，而且SVG格式的动画绘制方式必须让内容嵌入到HTML中使用。CSS3的出现让svg的应用变得相对少了。\n\n# CSS3 transition\n\ntransition是过度动画。但是transition并不能实现独立的动画，只能在某个标签元素样式或状态改变时进行平滑的动画效果过渡，而不是马上改变。\n\n## 注意\n\n在移动端开发中，直接使用transition动画会让页面变慢甚至卡顿。所以我们通常添加transform:translate3D(0,0,0)或transform:translateZ(0)来开启移动端动画的GPU加速，让动画过程更加流畅。\n\n# CSS3 animation\n\nanimation 算是真正意义上的CSS3动画。通过对关键帧和循环次数的控制，页面标签元素会根据设定好的样式改变进行平滑过渡。而且关键帧状态的控制是通过百分比来控制的。\n\n## 比较\n\nCSS3最大的优势是摆脱了js的控制，并且能利用硬件加速以及实现复杂动画效果。\n\n# Canvas动画\n\n> canvas作为H5新增元素，是借助Web API来实现动画的。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style> *{ margin:0; padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\"> let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke(); if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16); </script>\n</body>\n</html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n注释：通过getContext()获取元素的绘制对象，通过clearRect不断清空画布并在新的位置上使用fillStyle绘制新矩形内容实现页面动画效果。\n\n## 比较\n\n> Canvas主要优势是可以应对页面中多个动画元素渲染较慢的情况，完全通过javascript来渲染控制动画的执行。可用于实现较复杂动画。\n\n# requestAnimationFrame\n\nrequestAnimationFrame是另一种Web API，原理与setTimeout和setInterval类似，都是通过javascript持续循环的方法调用来触发动画动作。但是requestAnimationFrame是浏览器针对动画专门优化形成的APi，在性能上比另两者要好。\n\n> 通常，我们将执行动画的每一步传到requestAnimationFrame中，在每次执行完后进行异步回调来连续触发动画效果。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html>\n 3 <head>\n 4     <title></title>\n 5     <style type=\"text/css\">\n 6 * {\n 7             margin:0;\n 8             padding:0;\n 9         }\n10 div {\n11             width: 200px;\n12             height: 200px;\n13             background-color: #ccc;\n14         }\n15     </style>\n16 </head>\n17 <body>\n18     <div id=\"rect\"></div>\n19     <script type=\"text/javascript\">\n20 window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n21 window.msRequestAnimationFrame; 22 \n23 let elem = document.getElementById(\"rect\"); 24 let left = 0; 25     //自动执行持续性回调\n26 requestAnimationFrame(step); 27     //持续该改变元素位置\n28     function step() { 29         if(left<window.innerWidth-200){ 30             left+=1; 31 elem.style.marginLeft = left+\"px\"; 32 requestAnimationFrame(step); 33 } 34 } 35     </script>\n36 </body>\n37 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n我们注意到，requestAnimationFrame只是将回调的方法传入到自身的参数中执行，而不是通过setInterval调用。\n\n# 总结\n\n复杂的动画是通过一个个简单的动画组合实现的。基于兼容性问题，通常在项目中，一般在\n\n*   桌面端浏览器推荐使用javascript直接实现动画或SVG方式；\n*   移动端可以考虑使用CSS3 transition、CSS3 \n    animation、Canvas或requestAnimationFrame方式**。"]],[13,13],[5954,5954]]],[1578879423655,["Administrator@WIN-T3FPCJLTUH1",[[-1,12,"\n"]],[13,13],[12,12]]],[1578879423921,["Administrator@WIN-T3FPCJLTUH1",[[-1,11,"\n"]],[12,12],[11,11]]],[1578879425216,["Administrator@WIN-T3FPCJLTUH1",[[-1,0,"# 实现动画的6种方式"]],[11,11],[0,0]]],[1578879435760,["Administrator@WIN-T3FPCJLTUH1",[[-1,25," "]],[26,26],[25,25]]],[1578879437706,["Administrator@WIN-T3FPCJLTUH1",[[-1,44," "]],[45,45],[44,44]]],[1578879438647,["Administrator@WIN-T3FPCJLTUH1",[[-1,24," "]],[25,25],[24,24]]],[1578879439673,["Administrator@WIN-T3FPCJLTUH1",[[-1,42," "]],[42,42],[41,41]]],[1578879441445,["Administrator@WIN-T3FPCJLTUH1",[[-1,58,"  "]],[59,59],[57,57]]],[1578879442144,["Administrator@WIN-T3FPCJLTUH1",[[-1,75,"* "]],[77,77],[75,75]]],[1578879443121,["Administrator@WIN-T3FPCJLTUH1",[[-1,95,"  "]],[96,96],[94,94]]],[1578879443835,["Administrator@WIN-T3FPCJLTUH1",[[-1,107,"  "]],[109,109],[107,107]]],[1578879446499,["Administrator@WIN-T3FPCJLTUH1",[[1,76,"*"],[-1,1236," "],[1,1237," "],[-1,2789," "],[1,2790," "],[-1,5880," "],[1,5881," "]],[76,76],[77,77]]],[1578879448694,["Administrator@WIN-T3FPCJLTUH1",[[-1,75," "]],[76,76],[75,75]]],[1578879472952,["Administrator@WIN-T3FPCJLTUH1",[[-1,230,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <style type=\"text/css\">\n 6 #rect {\n 7             width: 200px;\n 8             height: 200px;\n 9             background: #ccc;\n10         }\n11     </style>\n12 </head>\n13 <body>\n14     <div id=\"rect\"></div>\n15     <script>\n16 let elem = document.getElementById('rect'); 17 let left = 0; 18 let timer = setInterval(function(){ 19             if(left<window.innerWidth-200){ 20 elem.style.marginLeft = left+'px'; 21 left ++; 22             }else { 23 clearInterval(timer); 24 } 25         },16); 26     </script>\n27 </body>\n28 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[230,1021],[230,230]]],[1578879474584,["Administrator@WIN-T3FPCJLTUH1",[[1,230,"··"]],[230,230],[232,232]]],[1578879475734,["Administrator@WIN-T3FPCJLTUH1",[[-1,230,"··"]],[232,232],[230,230]]],[1578879477082,["Administrator@WIN-T3FPCJLTUH1",[[1,230,"``"]],[230,230],[232,232]]],[1578879478916,["Administrator@WIN-T3FPCJLTUH1",[[1,233,"language\n```\n"]],[233,233],[233,241]]],[1578879480027,["Administrator@WIN-T3FPCJLTUH1",[[-1,233,"language"],[1,241,"h"]],[233,241],[234,234]]],[1578879480635,["Administrator@WIN-T3FPCJLTUH1",[[1,234,"tml"]],[234,234],[237,237]]],[1578879481157,["Administrator@WIN-T3FPCJLTUH1",[[1,238,"\n"]],[237,237],[238,238]]],[1578879488595,["Administrator@WIN-T3FPCJLTUH1",[[1,238,"通常在前端中，实现动画的方案主要有6种：\n\n*   javascript直接实现；\n*   SVG（可伸缩矢量图形）；\n*   CSS3 transition；\n*   CSS3 animation；\n*   Canvas动画；\n*   requestAnimationFrame；\n\n# javascript 直接实现动画\n\n> 其主要思想是通过setInterval或setTimeout方法的回调函数来持续调用改变某个元素的CSS样式以达到元素样式变化的效果。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <style type=\"text/css\">\n 6 #rect {\n 7             width: 200px;\n 8             height: 200px;\n 9             background: #ccc;\n10         }\n11     </style>\n12 </head>\n13 <body>\n14     <div id=\"rect\"></div>\n15     <script>\n16 let elem = document.getElementById('rect'); 17 let left = 0; 18 let timer = setInterval(function(){ 19             if(left<window.innerWidth-200){ 20 elem.style.marginLeft = left+'px'; 21 left ++; 22             }else { 23 clearInterval(timer); 24 } 25         },16); 26     </script>\n27 </body>\n28 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\nJquery的animate()方法就是这种方式实现的。\n\n## 存在的问题\n\njavascript 实现动画通常会导致页面频繁性重排重绘，消耗性能，一般应该在桌面端浏览器。在移动端上使用会有明显的卡顿。\n\n## Tip：为什么是16ms\n\n上面例子中，我们设置的setInterval时间间隔是16ms。一般认为人眼能辨识的流畅动画为每秒60帧，这里16ms比(1000ms/60)帧略小一些，但是一般可仍为该动画是流畅的。 \n在很多移动端动画性能优化时，一般使用16ms来进行节流处理连续触发的浏览器事件。例如对touchmove、scroll事件进行节流等。通过这种方式减少持续事件的触发频率，可以大大提升动画的流畅性。\n\n# SVG\n\nSVG动画由SVG元素内部的元素属性控制，一般通过一下几个元素控制：\n\n*   : 用于控制动画延时\n*   ：对属性的连续改变进行控制\n*   ：颜色变化，但用就能控制\n*   ：控制如缩放、旋转等几何变化\n*   ：控制SVG内元素的移动路径\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <title>Document</title>\n 6     <style>\n 7     *{\n 8         margin:0;\n 9         padding:0;\n10     }\n11     </style>\n12 </head>\n13 <body>\n14     <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n15         <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n16             <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n17             <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n18             <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n19             <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n20             <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n21 \n22         </rect>     \n23     </svg>  \n24 \n25 </body>\n26 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n这里推荐一个在sublime text3中使用svg提示插件：svg snippet。\n\n## 比较\n\nSVG的一大优势是含有较为丰富的动画功能，原生绘制各种图形、滤镜和动画，并且能被js调用。html是对dom的渲染，那么svg就是对图形的渲染。 \n但是，另一方面元素较多且复杂的动画使用svg渲染会比较慢，而且SVG格式的动画绘制方式必须让内容嵌入到HTML中使用。CSS3的出现让svg的应用变得相对少了。\n\n# CSS3 transition\n\ntransition是过度动画。但是transition并不能实现独立的动画，只能在某个标签元素样式或状态改变时进行平滑的动画效果过渡，而不是马上改变。\n\n## 注意\n\n在移动端开发中，直接使用transition动画会让页面变慢甚至卡顿。所以我们通常添加transform:translate3D(0,0,0)或transform:translateZ(0)来开启移动端动画的GPU加速，让动画过程更加流畅。\n\n# CSS3 animation\n\nanimation 算是真正意义上的CSS3动画。通过对关键帧和循环次数的控制，页面标签元素会根据设定好的样式改变进行平滑过渡。而且关键帧状态的控制是通过百分比来控制的。\n\n## 比较\n\nCSS3最大的优势是摆脱了js的控制，并且能利用硬件加速以及实现复杂动画效果。\n\n# Canvas动画\n\n> canvas作为H5新增元素，是借助Web API来实现动画的。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style> *{ margin:0; padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\"> let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke(); if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16); </script>\n</body>\n</html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n注释：通过getContext()获取元素的绘制对象，通过clearRect不断清空画布并在新的位置上使用fillStyle绘制新矩形内容实现页面动画效果。\n\n## 比较\n\n> Canvas主要优势是可以应对页面中多个动画元素渲染较慢的情况，完全通过javascript来渲染控制动画的执行。可用于实现较复杂动画。\n\n# requestAnimationFrame\n\nrequestAnimationFrame是另一种Web API，原理与setTimeout和setInterval类似，都是通过javascript持续循环的方法调用来触发动画动作。但是requestAnimationFrame是浏览器针对动画专门优化形成的APi，在性能上比另两者要好。\n\n> 通常，我们将执行动画的每一步传到requestAnimationFrame中，在每次执行完后进行异步回调来连续触发动画效果。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html>\n 3 <head>\n 4     <title></title>\n 5     <style type=\"text/css\">\n 6 * {\n 7             margin:0;\n 8             padding:0;\n 9         }\n10 div {\n11             width: 200px;\n12             height: 200px;\n13             background-color: #ccc;\n14         }\n15     </style>\n16 </head>\n17 <body>\n18     <div id=\"rect\"></div>\n19     <script type=\"text/javascript\">\n20 window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n21 window.msRequestAnimationFrame; 22 \n23 let elem = document.getElementById(\"rect\"); 24 let left = 0; 25     //自动执行持续性回调\n26 requestAnimationFrame(step); 27     //持续该改变元素位置\n28     function step() { 29         if(left<window.innerWidth-200){ 30             left+=1; 31 elem.style.marginLeft = left+\"px\"; 32 requestAnimationFrame(step); 33 } 34 } 35     </script>\n36 </body>\n37 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n我们注意到，requestAnimationFrame只是将回调的方法传入到自身的参数中执行，而不是通过setInterval调用。\n\n# 总结\n\n复杂的动画是通过一个个简单的动画组合实现的。基于兼容性问题，通常在项目中，一般在\n\n*   桌面端浏览器推荐使用javascript直接实现动画或SVG方式；\n*   移动端可以考虑使用CSS3 transition、CSS3 \n    animation、Canvas或requestAnimationFrame方式**。"]],[238,238],[6179,6179]]],[1578879494653,["Administrator@WIN-T3FPCJLTUH1",[[-1,238,"通常在前端中，实现动画的方案主要有6种：\n\n*   javascript直接实现；\n*   SVG（可伸缩矢量图形）；\n*   CSS3 transition；\n*   CSS3 animation；\n*   Canvas动画；\n*   requestAnimationFrame；\n\n# javascript 直接实现动画\n\n> 其主要思想是通过setInterval或setTimeout方法的回调函数来持续调用改变某个元素的CSS样式以达到元素样式变化的效果。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <style type=\"text/css\">\n 6 #rect {\n 7             width: 200px;\n 8             height: 200px;\n 9             background: #ccc;\n10         }\n11     </style>\n12 </head>\n13 <body>\n14     <div id=\"rect\"></div>\n15     <script>\n16 let elem = document.getElementById('rect'); 17 let left = 0; 18 let timer = setInterval(function(){ 19             if(left<window.innerWidth-200){ 20 elem.style.marginLeft = left+'px'; 21 left ++; 22             }else { 23 clearInterval(timer); 24 } 25         },16); 26     </script>\n27 </body>\n28 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\nJquery的animate()方法就是这种方式实现的。\n\n## 存在的问题\n\njavascript 实现动画通常会导致页面频繁性重排重绘，消耗性能，一般应该在桌面端浏览器。在移动端上使用会有明显的卡顿。\n\n## Tip：为什么是16ms\n\n上面例子中，我们设置的setInterval时间间隔是16ms。一般认为人眼能辨识的流畅动画为每秒60帧，这里16ms比(1000ms/60)帧略小一些，但是一般可仍为该动画是流畅的。 \n在很多移动端动画性能优化时，一般使用16ms来进行节流处理连续触发的浏览器事件。例如对touchmove、scroll事件进行节流等。通过这种方式减少持续事件的触发频率，可以大大提升动画的流畅性。\n\n# SVG\n\nSVG动画由SVG元素内部的元素属性控制，一般通过一下几个元素控制：\n\n*   : 用于控制动画延时\n*   ：对属性的连续改变进行控制\n*   ：颜色变化，但用就能控制\n*   ：控制如缩放、旋转等几何变化\n*   ：控制SVG内元素的移动路径\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <title>Document</title>\n 6     <style>\n 7     *{\n 8         margin:0;\n 9         padding:0;\n10     }\n11     </style>\n12 </head>\n13 <body>\n14     <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n15         <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n16             <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n17             <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n18             <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n19             <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n20             <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n21 \n22         </rect>     \n23     </svg>  \n24 \n25 </body>\n26 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n这里推荐一个在sublime text3中使用svg提示插件：svg snippet。\n\n## 比较\n\nSVG的一大优势是含有较为丰富的动画功能，原生绘制各种图形、滤镜和动画，并且能被js调用。html是对dom的渲染，那么svg就是对图形的渲染。 \n但是，另一方面元素较多且复杂的动画使用svg渲染会比较慢，而且SVG格式的动画绘制方式必须让内容嵌入到HTML中使用。CSS3的出现让svg的应用变得相对少了。\n\n# CSS3 transition\n\ntransition是过度动画。但是transition并不能实现独立的动画，只能在某个标签元素样式或状态改变时进行平滑的动画效果过渡，而不是马上改变。\n\n## 注意\n\n在移动端开发中，直接使用transition动画会让页面变慢甚至卡顿。所以我们通常添加transform:translate3D(0,0,0)或transform:translateZ(0)来开启移动端动画的GPU加速，让动画过程更加流畅。\n\n# CSS3 animation\n\nanimation 算是真正意义上的CSS3动画。通过对关键帧和循环次数的控制，页面标签元素会根据设定好的样式改变进行平滑过渡。而且关键帧状态的控制是通过百分比来控制的。\n\n## 比较\n\nCSS3最大的优势是摆脱了js的控制，并且能利用硬件加速以及实现复杂动画效果。\n\n# Canvas动画\n\n> canvas作为H5新增元素，是借助Web API来实现动画的。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style> *{ margin:0; padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\"> let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke(); if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16); </script>\n</body>\n</html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n注释：通过getContext()获取元素的绘制对象，通过clearRect不断清空画布并在新的位置上使用fillStyle绘制新矩形内容实现页面动画效果。\n\n## 比较\n\n> Canvas主要优势是可以应对页面中多个动画元素渲染较慢的情况，完全通过javascript来渲染控制动画的执行。可用于实现较复杂动画。\n\n# requestAnimationFrame\n\nrequestAnimationFrame是另一种Web API，原理与setTimeout和setInterval类似，都是通过javascript持续循环的方法调用来触发动画动作。但是requestAnimationFrame是浏览器针对动画专门优化形成的APi，在性能上比另两者要好。\n\n> 通常，我们将执行动画的每一步传到requestAnimationFrame中，在每次执行完后进行异步回调来连续触发动画效果。\n\n## 示例\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html>\n 3 <head>\n 4     <title></title>\n 5     <style type=\"text/css\">\n 6 * {\n 7             margin:0;\n 8             padding:0;\n 9         }\n10 div {\n11             width: 200px;\n12             height: 200px;\n13             background-color: #ccc;\n14         }\n15     </style>\n16 </head>\n17 <body>\n18     <div id=\"rect\"></div>\n19     <script type=\"text/javascript\">\n20 window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n21 window.msRequestAnimationFrame; 22 \n23 let elem = document.getElementById(\"rect\"); 24 let left = 0; 25     //自动执行持续性回调\n26 requestAnimationFrame(step); 27     //持续该改变元素位置\n28     function step() { 29         if(left<window.innerWidth-200){ 30             left+=1; 31 elem.style.marginLeft = left+\"px\"; 32 requestAnimationFrame(step); 33 } 34 } 35     </script>\n36 </body>\n37 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n我们注意到，requestAnimationFrame只是将回调的方法传入到自身的参数中执行，而不是通过setInterval调用。\n\n# 总结\n\n复杂的动画是通过一个个简单的动画组合实现的。基于兼容性问题，通常在项目中，一般在\n\n*   桌面端浏览器推荐使用javascript直接实现动画或SVG方式；\n*   移动端可以考虑使用CSS3 transition、CSS3 \n    animation、Canvas或requestAnimationFrame方式**。"]],[6179,6179],[238,238]]],[1578879500666,["Administrator@WIN-T3FPCJLTUH1",[[1,238,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <style type=\"text/css\">\n        #rect {\n            width: 200px;\n            height: 200px;\n            background: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script>\n        let elem = document.getElementById('rect');\n        let left = 0;\n        let timer = setInterval(function(){\n            if(left<window.innerWidth-200){\n                elem.style.marginLeft = left+'px';\n                left ++;\n            }else {\n                clearInterval(timer);\n            }\n        },16);\n    </script>\n</body>\n</html>"]],[238,238],[863,863]]],[1578879515994,["Administrator@WIN-T3FPCJLTUH1",[[-1,869,"\n"]],[869,869],[868,868]]],[1578879538083,["Administrator@WIN-T3FPCJLTUH1",[[-1,1229,"  : "]],[1229,1233],[1229,1229]]],[1578879598879,[null,[[-1,232,"\n"],[1,233,"`"],[1,869,"J"],[-1,1228," "],[1,1229,"用"]],[232,232],[1230,1230]]],[1578879598880,[null,[[1,232,"\n"],[-1,232,"`"],[-1,869,"J"],[1,1229," "],[-1,1229,"用"]],[1230,1230],[232,232]]],[1578879540488,["Administrator@WIN-T3FPCJLTUH1",[[-1,1240,"  ："]],[1240,1243],[1240,1240]]],[1578879542535,["Administrator@WIN-T3FPCJLTUH1",[[-1,1255,"  ："]],[1255,1258],[1255,1255]]],[1578879544592,["Administrator@WIN-T3FPCJLTUH1",[[-1,1269,"  ："]],[1269,1272],[1269,1269]]],[1578879546364,["Administrator@WIN-T3FPCJLTUH1",[[-1,1285,"  ："]],[1286,1288],[1285,1285]]],[1578879553543,["Administrator@WIN-T3FPCJLTUH1",[[-1,1307,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html lang=\"en\">\n 3 <head>\n 4     <meta charset=\"UTF-8\">\n 5     <title>Document</title>\n 6     <style>\n 7     *{\n 8         margin:0;\n 9         padding:0;\n10     }\n11     </style>\n12 </head>\n13 <body>\n14     <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n15         <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n16             <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n17             <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n18             <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n19             <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n20             <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n21 \n22         </rect>     \n23     </svg>  \n24 \n25 </body>\n26 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[1307,2493],[1307,1307]]],[1578879557085,["Administrator@WIN-T3FPCJLTUH1",[[-1,1308,"\n"]],[1307,1307],[1306,1306]]],[1578879568289,["Administrator@WIN-T3FPCJLTUH1",[[1,1307,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n            <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n            <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n            <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n            <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n            <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n\n        </rect>     \n    </svg>  \n\n</body>\n</html>"]],[1307,1307],[2241,2241]]],[1578879569999,["Administrator@WIN-T3FPCJLTUH1",[[-1,1307,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n            <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n            <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n            <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n            <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n            <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n\n        </rect>     \n    </svg>  \n\n</body>\n</html>"]],[2241,2241],[1307,1307]]],[1578879572855,["Administrator@WIN-T3FPCJLTUH1",[[1,1307,"```"]],[1307,1307],[1310,1310]]],[1578879572887,["Administrator@WIN-T3FPCJLTUH1",[[1,1310,"language\n```\n"]],[1310,1310],[1310,1318]]],[1578879574996,["Administrator@WIN-T3FPCJLTUH1",[[-1,1310,"language"],[1,1318,"h"]],[1310,1318],[1311,1311]]],[1578879575921,["Administrator@WIN-T3FPCJLTUH1",[[1,1311,"tml"]],[1311,1311],[1314,1314]]],[1578879576396,["Administrator@WIN-T3FPCJLTUH1",[[1,1315,"\n"]],[1314,1314],[1315,1315]]],[1578879577326,["Administrator@WIN-T3FPCJLTUH1",[[1,1315,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n            <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n            <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n            <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n            <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n            <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n\n        </rect>     \n    </svg>  \n\n</body>\n</html>"]],[1315,1315],[2249,2249]]],[1578879658883,[null,[[-1,232,"\n"],[1,233,"`"],[-1,869,""],[1,869,"J"],[-1,1228," "],[1,1229,"用"],[-1,1239," "],[1,1240,"对"],[-1,1254," "],[1,1255,"颜"],[-1,1268," "],[1,1269,"控"],[-1,1284," "],[1,1285,"控"],[-1,1306,"["],[1,2255,"这"]],[232,232],[2256,2256]]],[1578879658883,[null,[[1,232,"\n"],[-1,232,"`"],[1,869,""],[-1,869,"J"],[1,1229," "],[-1,1229,"用"],[1,1240," "],[-1,1240,"对"],[1,1255," "],[-1,1255,"颜"],[1,1269," "],[-1,1269,"控"],[1,1285," "],[-1,1285,"控"],[1,1307,"["],[-1,2255,"这"]],[2256,2256],[232,232]]],[1578879600607,["Administrator@WIN-T3FPCJLTUH1",[[-1,2214,"     "]],[2219,2219],[2214,2214]]],[1578879605567,["Administrator@WIN-T3FPCJLTUH1",[[-1,2198,"\n"]],[2198,2198],[2197,2197]]],[1578879608001,["Administrator@WIN-T3FPCJLTUH1",[[-1,2227,"\n"]],[2227,2227],[2226,2226]]],[1578879656974,["Administrator@WIN-T3FPCJLTUH1",[[-1,1306,"\n"]],[1306,1306],[1305,1305]]],[1578879658120,["Administrator@WIN-T3FPCJLTUH1",[[1,1306,"\n"]],[1305,1305],[1306,1306]]],[1578879718884,[null,[[-1,232,"\n"],[1,233,"`"],[1,869,"J"],[-1,897,""],[-1,1228," "],[1,1229,"用"],[-1,1239," "],[1,1240,"对"],[-1,1254," "],[1,1255,"颜"],[-1,1268," "],[1,1269,"控"],[-1,1284," "],[1,1285,"控"],[-1,1306,"\n"],[1,2248,"这"]],[232,232],[2249,2249]]],[1578879718884,[null,[[1,232,"\n"],[-1,232,"`"],[-1,869,"J"],[1,898,""],[1,1229," "],[-1,1229,"用"],[1,1240," "],[-1,1240,"对"],[1,1255," "],[-1,1255,"颜"],[1,1269," "],[-1,1269,"控"],[1,1285," "],[-1,1285,"控"],[1,1307,"\n"],[-1,2248,"这"]],[2249,2249],[232,232]]],[1578879682424,["Administrator@WIN-T3FPCJLTUH1",[[-1,2890,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style> *{ margin:0; padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\"> let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke(); if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16); </script>\n</body>\n</html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[2890,3783],[2890,2890]]],[1578879690303,["Administrator@WIN-T3FPCJLTUH1",[[1,2890,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\">\n        let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke();\n            if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16);\n    </script>\n</body>\n</html>"]],[2890,2890],[3653,3653]]],[1578879692020,["Administrator@WIN-T3FPCJLTUH1",[[-1,2890,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\">\n        let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke();\n            if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16);\n    </script>\n</body>\n</html>"]],[3653,3653],[2890,2890]]],[1578879694060,["Administrator@WIN-T3FPCJLTUH1",[[1,2890,"```"]],[2890,2890],[2893,2893]]],[1578879694091,["Administrator@WIN-T3FPCJLTUH1",[[1,2893,"language\n```\n"]],[2893,2893],[2893,2901]]],[1578879695627,["Administrator@WIN-T3FPCJLTUH1",[[-1,2893,"language"],[1,2901,"h"]],[2893,2901],[2894,2894]]],[1578879696263,["Administrator@WIN-T3FPCJLTUH1",[[1,2894,"tml"]],[2894,2894],[2897,2897]]],[1578879696543,["Administrator@WIN-T3FPCJLTUH1",[[1,2898,"\n"]],[2897,2897],[2898,2898]]],[1578879697224,["Administrator@WIN-T3FPCJLTUH1",[[1,2898,"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\">\n        let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke();\n            if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16);\n    </script>\n</body>\n</html>"]],[2898,2898],[3661,3661]]],[1578879707446,["Administrator@WIN-T3FPCJLTUH1",[[-1,3667,"\n"]],[3667,3667],[3666,3666]]],[1578879710535,["Administrator@WIN-T3FPCJLTUH1",[[-1,3753,"\n"]],[3753,3753],[3752,3752]]],[1578879711758,["Administrator@WIN-T3FPCJLTUH1",[[1,3753,"\n"]],[3752,3752],[3753,3753]]],[1578879778885,[null,[[-1,232,"\n"],[1,233,"`"],[1,869,"J"],[-1,897,""],[-1,1228," "],[1,1229,"用"],[-1,1239," "],[1,1240,"对"],[-1,1254," "],[1,1255,"颜"],[-1,1268," "],[1,1269,"控"],[-1,1284," "],[1,1285,"控"],[-1,1306,"\n"],[1,2248,"这"],[-1,2291,""],[-1,2889,"["],[1,2898,""],[1,3667,"注"],[-1,3745,""],[-1,3753,"\n"],[1,3754,">"]],[232,232],[3755,3755]]],[1578879778885,[null,[[1,232,"\n"],[-1,232,"`"],[-1,869,"J"],[1,898,""],[1,1229," "],[-1,1229,"用"],[1,1240," "],[-1,1240,"对"],[1,1255," "],[-1,1255,"颜"],[1,1269," "],[-1,1269,"控"],[1,1285," "],[-1,1285,"控"],[1,1307,"\n"],[-1,2248,"这"],[1,2292,""],[1,2890,"["],[-1,2898,""],[-1,3667,"注"],[1,3746,""],[1,3754,"\n"],[-1,3754,">"]],[3755,3755],[232,232]]],[1578879752963,["Administrator@WIN-T3FPCJLTUH1",[[-1,4071,"[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")\n\n 1 <!DOCTYPE html>\n 2 <html>\n 3 <head>\n 4     <title></title>\n 5     <style type=\"text/css\">\n 6 * {\n 7             margin:0;\n 8             padding:0;\n 9         }\n10 div {\n11             width: 200px;\n12             height: 200px;\n13             background-color: #ccc;\n14         }\n15     </style>\n16 </head>\n17 <body>\n18     <div id=\"rect\"></div>\n19     <script type=\"text/javascript\">\n20 window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n21 window.msRequestAnimationFrame; 22 \n23 let elem = document.getElementById(\"rect\"); 24 let left = 0; 25     //自动执行持续性回调\n26 requestAnimationFrame(step); 27     //持续该改变元素位置\n28     function step() { 29         if(left<window.innerWidth-200){ 30             left+=1; 31 elem.style.marginLeft = left+\"px\"; 32 requestAnimationFrame(step); 33 } 34 } 35     </script>\n36 </body>\n37 </html>\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0); \"复制代码\")"]],[4071,5156],[4071,4071]]],[1578879760279,["Administrator@WIN-T3FPCJLTUH1",[[1,4071,"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n        * {\n            margin:0;\n            padding:0;\n        }\n        div {\n            width: 200px;\n            height: 200px;\n            background-color: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script type=\"text/javascript\">\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame;\n\n    let elem = document.getElementById(\"rect\");\n    let left = 0;\n    //自动执行持续性回调\n    requestAnimationFrame(step);\n    //持续该改变元素位置\n    function step() {\n        if(left<window.innerWidth-200){\n            left+=1;\n            elem.style.marginLeft = left+\"px\";\n            requestAnimationFrame(step);\n        }\n    }\n    </script>\n</body>\n</html>"]],[4071,4071],[4943,4943]]],[1578879761415,["Administrator@WIN-T3FPCJLTUH1",[[-1,4071,"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n        * {\n            margin:0;\n            padding:0;\n        }\n        div {\n            width: 200px;\n            height: 200px;\n            background-color: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script type=\"text/javascript\">\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame;\n\n    let elem = document.getElementById(\"rect\");\n    let left = 0;\n    //自动执行持续性回调\n    requestAnimationFrame(step);\n    //持续该改变元素位置\n    function step() {\n        if(left<window.innerWidth-200){\n            left+=1;\n            elem.style.marginLeft = left+\"px\";\n            requestAnimationFrame(step);\n        }\n    }\n    </script>\n</body>\n</html>"]],[4943,4943],[4071,4071]]],[1578879762640,["Administrator@WIN-T3FPCJLTUH1",[[1,4071,"```"]],[4071,4071],[4074,4074]]],[1578879762671,["Administrator@WIN-T3FPCJLTUH1",[[1,4074,"language\n```\n"]],[4074,4074],[4074,4082]]],[1578879764025,["Administrator@WIN-T3FPCJLTUH1",[[-1,4074,"language"],[1,4082,"h"]],[4074,4082],[4075,4075]]],[1578879764769,["Administrator@WIN-T3FPCJLTUH1",[[1,4075,"tml"]],[4075,4075],[4078,4078]]],[1578879766343,["Administrator@WIN-T3FPCJLTUH1",[[1,4079,"\n"]],[4078,4078],[4079,4079]]],[1578879766901,["Administrator@WIN-T3FPCJLTUH1",[[1,4079,"<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n        * {\n            margin:0;\n            padding:0;\n        }\n        div {\n            width: 200px;\n            height: 200px;\n            background-color: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script type=\"text/javascript\">\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame;\n\n    let elem = document.getElementById(\"rect\");\n    let left = 0;\n    //自动执行持续性回调\n    requestAnimationFrame(step);\n    //持续该改变元素位置\n    function step() {\n        if(left<window.innerWidth-200){\n            left+=1;\n            elem.style.marginLeft = left+\"px\";\n            requestAnimationFrame(step);\n        }\n    }\n    </script>\n</body>\n</html>"]],[4079,4079],[4951,4951]]],[1578879778789,["Administrator@WIN-T3FPCJLTUH1",[[-1,4957,"\n"]],[4957,4957],[4956,4956]]],[1578879830002,[null,[[-1,232,"\n"],[1,233,"`"],[-1,869,""],[1,869,"J"],[-1,1228," "],[1,1229,"用"],[-1,1239," "],[1,1240,"对"],[-1,1254," "],[1,1255,"颜"],[-1,1268," "],[1,1269,"控"],[-1,1284," "],[1,1285,"控"],[-1,1306,"\n"],[-1,2248,""],[1,2248,"这"],[-1,2889,"["],[1,2890,""],[1,3667,"注"],[-1,3753,"\n"],[1,3754,">"],[-1,4070,"["],[1,4071,""],[1,4957,"我"]],[232,232],[4958,4958]]],[1578879830002,[null,[[1,232,"\n"],[-1,232,"`"],[1,869,""],[-1,869,"J"],[1,1229," "],[-1,1229,"用"],[1,1240," "],[-1,1240,"对"],[1,1255," "],[-1,1255,"颜"],[1,1269," "],[-1,1269,"控"],[1,1285," "],[-1,1285,"控"],[1,1307,"\n"],[1,2248,""],[-1,2248,"这"],[1,2890,"["],[-1,2890,""],[-1,3667,"注"],[1,3754,"\n"],[-1,3754,">"],[1,4071,"["],[-1,4071,""],[-1,4957,"我"]],[4958,4958],[232,232]]],[1578879784395,["Administrator@WIN-T3FPCJLTUH1",[[-1,5075,"  "]],[5077,5077],[5075,5075]]],[1578879785251,["Administrator@WIN-T3FPCJLTUH1",[[-1,5111,"  "]],[5113,5113],[5111,5111]]],[1578879790353,["Administrator@WIN-T3FPCJLTUH1",[[-1,5142,"    "]],[5146,5146],[5142,5142]]],[1578879790795,["Administrator@WIN-T3FPCJLTUH1",[[-1,5141,"\n"]],[5142,5142],[5141,5141]]],[1578879799194,["Administrator@WIN-T3FPCJLTUH1",[[-1,4064,"## "]],[4064,4067],[4064,4064]]],[1578879802034,["Administrator@WIN-T3FPCJLTUH1",[[1,4064,"**"],[1,4066,"**"]],[4064,4066],[4064,4070]]],[1578879810028,["Administrator@WIN-T3FPCJLTUH1",[[-1,3747,"## "]],[3750,3750],[3747,3747]]],[1578879810344,["Administrator@WIN-T3FPCJLTUH1",[[-1,3746,"\n"]],[3747,3747],[3746,3746]]],[1578879811663,["Administrator@WIN-T3FPCJLTUH1",[[1,3746,"\n"]],[3746,3746],[3747,3747]]],[1578879813201,["Administrator@WIN-T3FPCJLTUH1",[[1,3747,"**"],[1,3749,"**"]],[3747,3749],[3747,3753]]],[1578879820638,["Administrator@WIN-T3FPCJLTUH1",[[-1,3754,"\n"]],[3754,3754],[3753,3753]]],[1578879824358,["Administrator@WIN-T3FPCJLTUH1",[[1,3754,"\n"]],[3753,3753],[3754,3754]]],[1578879824591,["Administrator@WIN-T3FPCJLTUH1",[[-1,3747,"**"],[-1,3751,"**"]],[3747,3753],[3747,3749]]],[1578879825221,["Administrator@WIN-T3FPCJLTUH1",[[-1,3746,"\n"]],[3747,3747],[3746,3746]]],[1578879825703,["Administrator@WIN-T3FPCJLTUH1",[[1,3746,"\n"]],[3746,3746],[3747,3747]]],[1578879826050,["Administrator@WIN-T3FPCJLTUH1",[[1,3747,"## "]],[3747,3747],[3750,3750]]],[1578879826412,["Administrator@WIN-T3FPCJLTUH1",[[-1,4064,"**"],[-1,4068,"**"]],[4064,4070],[4064,4066]]],[1578879826978,["Administrator@WIN-T3FPCJLTUH1",[[1,4064,"## "]],[4064,4064],[4064,4067]]]],null,"Administrator@WIN-T3FPCJLTUH1"],["cf86c002-08dd-4523-ae95-0fce964e2b82",1579050261825,"通常在前端中，实现动画的方案主要有6种：\n\n* javascript直接实现；\n* SVG（可伸缩矢量图形）；\n* CSS3 transition；\n* CSS3 animation；\n* Canvas动画；\n* requestAnimationFrame；\n\n# javascript 直接实现动画\n\n> 其主要思想是通过setInterval或setTimeout方法的回调函数来持续调用改变某个元素的CSS样式以达到元素样式变化的效果。\n\n## 示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <style type=\"text/css\">\n        #rect {\n            width: 200px;\n            height: 200px;\n            background: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script>\n        let elem = document.getElementById('rect');\n        let left = 0;\n        let timer = setInterval(function(){\n            if(left<window.innerWidth-200){\n                elem.style.marginLeft = left+'px';\n                left ++;\n            }else {\n                clearInterval(timer);\n            }\n        },16);\n    </script>\n</body>\n</html>\n```\n\nJquery的animate()方法就是这种方式实现的。\n\n## 存在的问题\n\njavascript 实现动画通常会导致页面频繁性重排重绘，消耗性能，一般应该在桌面端浏览器。在移动端上使用会有明显的卡顿。\n\n## Tip：为什么是16ms\n\n上面例子中，我们设置的setInterval时间间隔是16ms。一般认为人眼能辨识的流畅动画为每秒60帧，这里16ms比(1000ms/60)帧略小一些，但是一般可仍为该动画是流畅的。 \n在很多移动端动画性能优化时，一般使用16ms来进行节流处理连续触发的浏览器事件。例如对touchmove、scroll事件进行节流等。通过这种方式减少持续事件的触发频率，可以大大提升动画的流畅性。\n\n# SVG\n\nSVG动画由SVG元素内部的元素属性控制，一般通过一下几个元素控制：\n\n* 用于控制动画延时\n* 对属性的连续改变进行控制\n* 颜色变化，但用就能控制\n* 控制如缩放、旋转等几何变化\n* 控制SVG内元素的移动路径\n\n## 示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <svg id=\"box\" width=\"800\" height=\"400\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n        <rect x=\"\" y=\"\" width=\"100\" height=\"100\" fill=\"rgb(255,0,0);\" stroke=\"\" stroke-width=\"\">\n            <set attributeName=\"x\" attributeType=\"XML\" to=\"100\" begin=\"4s\"/>\n            <animate attributeName=\"x\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"300\"/>\n            <animate attributeName=\"y\" attributeType=\"XML\" begin=\"0s\" dur=\"4s\" from=\"0\" to=\"0\"/>\n            <animateTransform attributeName=\"transform\" begin=\"0s\" dur=\"4s\" type=\"scale\" from=\"1\" to=\"2\" repeatCount=\"1\" />\n            <animateMotion path=\"M10,80 q100,120 120,20 q140,-50 160,0\" begin=\"0s\" dur=\"4s\" repeatCount=\"1\" />\n        </rect>\n    </svg>  \n</body>\n</html>\n```\n\n这里推荐一个在sublime text3中使用svg提示插件：svg snippet。\n\n## 比较\n\nSVG的一大优势是含有较为丰富的动画功能，原生绘制各种图形、滤镜和动画，并且能被js调用。html是对dom的渲染，那么svg就是对图形的渲染。 \n但是，另一方面元素较多且复杂的动画使用svg渲染会比较慢，而且SVG格式的动画绘制方式必须让内容嵌入到HTML中使用。CSS3的出现让svg的应用变得相对少了。\n\n# CSS3 transition\n\ntransition是过度动画。但是transition并不能实现独立的动画，只能在某个标签元素样式或状态改变时进行平滑的动画效果过渡，而不是马上改变。\n\n## 注意\n\n在移动端开发中，直接使用transition动画会让页面变慢甚至卡顿。所以我们通常添加transform:translate3D(0,0,0)或transform:translateZ(0)来开启移动端动画的GPU加速，让动画过程更加流畅。\n\n# CSS3 animation\n\nanimation 算是真正意义上的CSS3动画。通过对关键帧和循环次数的控制，页面标签元素会根据设定好的样式改变进行平滑过渡。而且关键帧状态的控制是通过百分比来控制的。\n\n## 比较\n\nCSS3最大的优势是摆脱了js的控制，并且能利用硬件加速以及实现复杂动画效果。\n\n# Canvas动画\n\n> canvas作为H5新增元素，是借助Web API来实现动画的。\n\n## 示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n    *{\n        margin:0;\n        padding:0;\n    }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\" width=\"700\" height=\"550\"></canvas>\n    <script type=\"text/javascript\">\n        let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let left = 0;\n        let timer = setInterval(function(){\n            ctx.clearRect(0,0,700,550);\n            ctx.beginPath();\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(left,0,100,100);\n            ctx.stroke();\n            if(left>700){\n                clearInterval(timer);\n            }\n            left += 1;\n        },16);\n    </script>\n</body>\n</html>\n```\n\n注释：通过getContext()获取元素的绘制对象，通过clearRect不断清空画布并在新的位置上使用fillStyle绘制新矩形内容实现页面动画效果。\n\n## 比较\n\n> Canvas主要优势是可以应对页面中多个动画元素渲染较慢的情况，完全通过javascript来渲染控制动画的执行。可用于实现较复杂动画。\n\n# requestAnimationFrame\n\nrequestAnimationFrame是另一种Web API，原理与setTimeout和setInterval类似，都是通过javascript持续循环的方法调用来触发动画动作。但是requestAnimationFrame是浏览器针对动画专门优化形成的APi，在性能上比另两者要好。\n\n> 通常，我们将执行动画的每一步传到requestAnimationFrame中，在每次执行完后进行异步回调来连续触发动画效果。\n\n## 示例\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style type=\"text/css\">\n        * {\n            margin:0;\n            padding:0;\n        }\n        div {\n            width: 200px;\n            height: 200px;\n            background-color: #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"rect\"></div>\n    <script type=\"text/javascript\">\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||\n    window.msRequestAnimationFrame;\n\n    let elem = document.getElementById(\"rect\");\n    let left = 0;\n    //自动执行持续性回调\n    requestAnimationFrame(step);\n    //持续该改变元素位置\n    function step() {\n        if(left<window.innerWidth-200){\n            left+=1;\n            elem.style.marginLeft = left+\"px\";\n            requestAnimationFrame(step);\n        }\n    }\n    </script>\n</body>\n</html>\n```\n\n我们注意到，requestAnimationFrame只是将回调的方法传入到自身的参数中执行，而不是通过setInterval调用。\n\n# 总结\n\n复杂的动画是通过一个个简单的动画组合实现的。基于兼容性问题，通常在项目中，一般在\n\n* 桌面端浏览器推荐使用javascript直接实现动画或SVG方式；\n* 移动端可以考虑使用CSS3 transition、CSS3 animation、Canvas或requestAnimationFrame方式**。\n\n",[[1579050241105,["Administrator@WIN-T3FPCJLTUH1",[[-1,1082," "]],[1083,1083],[1082,1082]]],[1579051213418,["Administrator@WIN-T3FPCJLTUH1",[[-1,1215,"一"],[1,1216,"以"]],[1215,1215],[1216,1216]]],[1579051276020,["Administrator@WIN-T3FPCJLTUH1",[[-1,2486,"度"],[1,2487,"渡"]],[2485,2485],[2487,2487]]]],null,"Administrator@WIN-T3FPCJLTUH1"]]}